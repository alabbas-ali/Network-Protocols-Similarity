t_acrit <- qt(a,2*(n-1))
t_acrit
t_bcrit <- qt(b,2*(n-1))
t_bcrit
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degree_of_freedom)
sample_Size<-function(sp ,d, a, b ,n)
{
t_acrit <- qt(a,2*(n-1))
t_acrit
t_bcrit <- qt(b,2*(n-1))
return(t_bcrit)
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degree_of_freedom)
sample_Size<-function(sp ,d, a, b ,f)
{
t_acrit <- qt(a,f)
t_acrit
t_bcrit <- qt(b,f)
return(t_bcrit)
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
t_acrit <- qt(0.95,14)
t_acrit
t_bcrit <- qt(0.5,15)
t_bcrit
t_bcrit <- qt(0.01,14)
t_bcrit
t_bcrit <- qt((1-0.01),14)
t_bcrit
ceiling(1.45)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degrees of freedom)
sample_Size<-function(Sp ,d, a, b ,f)
{
n <- (qt(a,f) + qt(b,f))^2 * Sp^2 * (2/d^2)
for (m in ceiling(n):100) {
df = 2*m - 2
k <- (qt(a,df) + qt(b,df))^2 * Sp^2 * (2/d^2)
if (m >= k) {
return(m)
}
}
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degrees of freedom)
sample_Size<-function(Sp ,d, a, b ,f)
{
n <- (qt(a,f) + qt(b,f))^2 * Sp^2 * (2/d^2)
for (m in ceiling(n):100) {
df = 2*m - 2
k <- (qt(a,df) + qt(b,df))^2 * Sp^2 * (2/d^2)
if (m >= k) {
return(m)
}
}
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
sample_Size(29.52, 71, 0.95, 0.1, 14)
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
q()
q()
waterDataTraining <- readRDS("F:/Google Drive/Master 2016/Sommer Semester 3/Simulation Method/ResourcePackage/source/R/Framework/Data/waterDataTraining.RDS")
rm(list=ls());
set.seed(2);
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
source("f1score.R")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages('installr')
if(!require("installr")) install.packages('installr')
library("installr")
updateR() # this will open dialog boxes to take you through the steps.
# OR use:
# updateR(TRUE) # this will use common defaults and will be the safest/fastest option
library("installr")
installr() #  user can easily select (via a GUI interface) a software to install.
View(machines)
View(matrix_4.die)
View(OC)
View(data)
###############################################################################
### initialize workspace ######################################################
rm(list=ls());
set.seed(2);
setwd("F:/Google Drive/Master 2016/Sommer Semester 3/Simulation Method/ResourcePackage/source")
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
source("f1score.R")
###############################################################################
### read training data  #######################################################
#timeSeriesData <- data.frame(X1=(runif(n = 100)*100), X2=(runif(n = 100)*100), X3=(runif(n = 100)*100), EVENT=(runif(n = 100)+0.03)>=1, Prediction=NA)
setwd(dataDir)
trainingData <- readRDS(file = "waterDataTraining2018.RDS")
###############################################################################
### initialize workspace ######################################################
rm(list=ls());
set.seed(2);
setwd("F:/Google Drive/Master 2016/Sommer Semester 3/Simulation Method/ResourcePackage/source")
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
q()
install.packages("xlsx")
library(xlsx)
data <- read.xlsx("C:/Users/weeam/Desktop/data.xlsx")
data <- read.xlsx("C:/Users/weeam/Desktop/data.xlsx", sheetName = "Tab")
View(data)
data <- data[data$Power >=80 & data$Power <=100,]
data <- data[data$Power >=80 & data$Power <=100 & data$Heel.Cracks >= 0.2& data$Heel.Cracks <= 0.4,]
library(xlsx)
data <- read.xlsx("C:/Users/weeam/Desktop/data.xlsx", sheetName = "Tab")
data <- data[data$Power >=80 & data$Power <=100 & data$Heel.Cracks <= 0.2,]
# set the working directory to be the same as file path
require(ggplot2)
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
MyData <- read.csv(file="results.csv", header=TRUE, sep=",")
MyData <- data.frame(MyData[2:101,][3:47])
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
lables <- c("Cosine", "Jaccard", "RBF", "Ngram", "Needleman Wunch")
for (i in 1:5) {
http_sip <- as.numeric.factor(MyData[,i])
http_ftp <- as.numeric.factor(MyData[,(5+i)])
sip_ftp <- as.numeric.factor(MyData[,(5*2+i)])
http_http_5 <- as.numeric.factor(MyData[1:50,(5*3+i)])
sip_sip_5 <- as.numeric.factor(MyData[1:50,(5*4+i)])
ftp_ftp_5 <- as.numeric.factor(MyData[1:50,(5*5+i)])
http_http_1 <- as.numeric.factor(MyData[1:50,(5*6+i)])
sip_sip_1 <- as.numeric.factor(MyData[1:50,(5*7+i)])
ftp_ftp_1 <- as.numeric.factor(MyData[1:50,(5*8+i)])
par(mfrow = c(3,3))
plot(
http_sip,
main=paste(lables[i], "HTTP/SIP", sep=" "),
sub=paste("?? =", mean(http_sip), ", ?? =",sd(http_sip), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
http_ftp,
main=paste(lables[i], "HTTP/FTP", sep=" "),
sub=paste("?? =", mean(http_ftp), ", ?? =",sd(http_ftp), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
sip_ftp,
main=paste(lables[i], "SIP/FTP", sep=" "),
sub=paste("?? =", mean(sip_ftp), ", ?? =",sd(sip_ftp), sep=" "),
ylim = c(0, 1),
xlab = "Similarity Value %",
ylab = "Sample Number"
)
plot(
http_http_5,
main=paste(lables[i], "HTTP/HTTP (50% DIF)", sep=" "),
sub=paste("?? =", mean(http_http_5), ", ?? =",sd(http_http_5), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
ftp_ftp_5,
main=paste(lables[i], "FTP/FTP (50% DIF)", sep=" "),
sub=paste("?? =", mean(ftp_ftp_5), ", ?? =",sd(ftp_ftp_5), sep=" "),
ylim = c(0, 1),
xlab = "Similarity Value %",
ylab = "Sample Number"
)
plot(
sip_sip_5 ,
main=paste(lables[i], "SIP/SIP (50% DIF)", sep=" "),
sub=paste("?? =", mean(sip_sip_5), ", ?? =",sd(sip_sip_5), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
http_http_1,
main=paste(lables[i], "HTTP/HTTP (100% DIF)", sep=" "),
sub=paste("?? =", mean(http_http_1), ", ?? =",sd(http_http_1), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
ftp_ftp_1,
main=paste(lables[i], "FTP/FTP (100% DIF)", sep=" "),
sub=paste("?? =", mean(ftp_ftp_1), ", ?? =",sd(ftp_ftp_1), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
sip_sip_1,
main= paste(lables[i], "SIP/SIP (100% DIF)", sep=" "),
sub=paste("?? =", mean(sip_sip_1), ", ?? =",sd(sip_sip_1), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
tt <- data.frame(
http_sip,
http_ftp,
sip_ftp,
http_http_5,
ftp_ftp_5,
sip_sip_5,
http_http_1,
ftp_ftp_1,
sip_sip_1
)
par(mfrow = c(1,1))
boxplot(
tt,
main = paste(lables[i], "Boxplot" , sep=" "),
col = 1:9
)
}
# set the working directory to be the same as file path
require(ggplot2)
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
MyData <- read.csv(file="results.csv", header=TRUE, sep=",")
MyData <- data.frame(MyData[2:101,][3:47])
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
lables <- c("Cosine", "Jaccard", "RBF", "Ngram", "Needleman Wunch")
for (i in 1:5) {
http_sip <- as.numeric.factor(MyData[,i])
http_ftp <- as.numeric.factor(MyData[,(5+i)])
sip_ftp <- as.numeric.factor(MyData[,(5*2+i)])
http_http_5 <- as.numeric.factor(MyData[1:50,(5*3+i)])
sip_sip_5 <- as.numeric.factor(MyData[1:50,(5*4+i)])
ftp_ftp_5 <- as.numeric.factor(MyData[1:50,(5*5+i)])
http_http_1 <- as.numeric.factor(MyData[1:50,(5*6+i)])
sip_sip_1 <- as.numeric.factor(MyData[1:50,(5*7+i)])
ftp_ftp_1 <- as.numeric.factor(MyData[1:50,(5*8+i)])
par(mfrow = c(3,3))
plot(
http_sip,
main=paste(lables[i], "HTTP/SIP", sep=" "),
sub=paste("Âµ =", mean(http_sip), ", Ï =",sd(http_sip), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
http_ftp,
main=paste(lables[i], "HTTP/FTP", sep=" "),
sub=paste("Âµ =", mean(http_ftp), ", Ï =",sd(http_ftp), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
sip_ftp,
main=paste(lables[i], "SIP/FTP", sep=" "),
sub=paste("Âµ =", mean(sip_ftp), ", Ï =",sd(sip_ftp), sep=" "),
ylim = c(0, 1),
xlab = "Similarity Value %",
ylab = "Sample Number"
)
plot(
http_http_5,
main=paste(lables[i], "HTTP/HTTP (50% DIF)", sep=" "),
sub=paste("Âµ =", mean(http_http_5), ", Ï =",sd(http_http_5), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
ftp_ftp_5,
main=paste(lables[i], "FTP/FTP (50% DIF)", sep=" "),
sub=paste("Âµ =", mean(ftp_ftp_5), ", Ï =",sd(ftp_ftp_5), sep=" "),
ylim = c(0, 1),
xlab = "Similarity Value %",
ylab = "Sample Number"
)
plot(
sip_sip_5 ,
main=paste(lables[i], "SIP/SIP (50% DIF)", sep=" "),
sub=paste("Âµ =", mean(sip_sip_5), ", Ï =",sd(sip_sip_5), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
http_http_1,
main=paste(lables[i], "HTTP/HTTP (100% DIF)", sep=" "),
sub=paste("Âµ =", mean(http_http_1), ", Ï =",sd(http_http_1), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
ftp_ftp_1,
main=paste(lables[i], "FTP/FTP (100% DIF)", sep=" "),
sub=paste("Âµ =", mean(ftp_ftp_1), ", Ï =",sd(ftp_ftp_1), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
plot(
sip_sip_1,
main= paste(lables[i], "SIP/SIP (100% DIF)", sep=" "),
sub=paste("Âµ =", mean(sip_sip_1), ", Ï =",sd(sip_sip_1), sep=" "),
ylim = c(0, 1),
ylab = "Similarity Value %",
xlab = "Sample Number"
)
tt <- data.frame(
http_sip,
http_ftp,
sip_ftp,
http_http_5,
ftp_ftp_5,
sip_sip_5,
http_http_1,
ftp_ftp_1,
sip_sip_1
)
par(mfrow = c(1,1))
boxplot(
tt,
main = paste(lables[i], "Boxplot" , sep=" "),
col = 1:9
)
}
