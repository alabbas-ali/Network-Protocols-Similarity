{
sd <- sdCom/sqrt(n)*sqrt(2)
t_crit <- qt(a,2*(n-1))
mu_crit <- t_crit*sd
mu <- seq(-10,75,5)
oc <- pt((mu_crit-mu)/sd,2*(n-1))
plot(oc~mu,type="l",col=color,lty=0)
lines(oc~mu,col=color)
abline(b,0)
}
#function call
oc_lines(8, 0.95,0.1,29.52,"orange",1)
oc_lines(8, 0.95,0.1,29.52,"orange",0)
oc_lines(32,0.95,0.1,29.52,"black",0)
oc_lines(16,0.95,0.1,29.52,"blue",0)
oc_lines(12,0.95,0.1,29.52,"red",0)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degree_of_freedom)
sample_Size<-function(sp ,d, a, b ,n)
{
t_acrit <- qt(a,2*(n-1))
t_acrit
t_bcrit <- qt(b,2*(n-1))
t_bcrit
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
#function definition
# ( SampleSize , confidanceLevel, ß error, CommonStand.dev , ColorOfCurve, if new plot)
oc_lines<-function(n,a,b,sdCom,color,p)
{
sd <- sdCom/sqrt(n)*sqrt(2)
t_crit <- qt(a,2*(n-1))
mu_crit <- t_crit*sd
mu <- seq(-10,75,5)
oc <- pt((mu_crit-mu)/sd,2*(n-1))
plot(oc~mu,type="l",col=color,lty=0)
lines(oc~mu,col=color)
abline(b,0)
}
#function call
oc_lines(8, 0.95,0.1,29.52,"orange",1)
oc_lines(8, 0.95,0.1,29.52,"orange",0)
oc_lines(32,0.95,0.1,29.52,"black",0)
oc_lines(16,0.95,0.1,29.52,"blue",0)
oc_lines(12,0.95,0.1,29.52,"red",0)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degree_of_freedom)
sample_Size<-function(sp ,d, a, b ,n)
{
t_acrit <- qt(a,2*(n-1))
t_acrit
t_bcrit <- qt(b,2*(n-1))
t_bcrit
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
#function definition
# ( SampleSize , confidanceLevel, ß error, CommonStand.dev , ColorOfCurve, if new plot)
oc_lines<-function(n,a,b,sdCom,color,p)
{
sd <- sdCom/sqrt(n)*sqrt(2)
t_crit <- qt(a,2*(n-1))
mu_crit <- t_crit*sd
mu <- seq(-10,75,5)
oc <- pt((mu_crit-mu)/sd,2*(n-1))
y <- ifelse(p==1, plot(oc~mu,type="l",col=color,lty=0),NA)
lines(oc~mu,col=color)
abline(b,0)
}
#function call
oc_lines(8, 0.95,0.1,29.52,"orange",1)
oc_lines(8, 0.95,0.1,29.52,"orange",0)
oc_lines(32,0.95,0.1,29.52,"black",0)
oc_lines(16,0.95,0.1,29.52,"blue",0)
oc_lines(12,0.95,0.1,29.52,"red",0)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degree_of_freedom)
sample_Size<-function(sp ,d, a, b ,n)
{
t_acrit <- qt(a,2*(n-1))
t_acrit
t_bcrit <- qt(b,2*(n-1))
t_bcrit
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degree_of_freedom)
sample_Size<-function(sp ,d, a, b ,n)
{
t_acrit <- qt(a,2*(n-1))
t_acrit
t_bcrit <- qt(b,2*(n-1))
return(t_bcrit)
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degree_of_freedom)
sample_Size<-function(sp ,d, a, b ,f)
{
t_acrit <- qt(a,f)
t_acrit
t_bcrit <- qt(b,f)
return(t_bcrit)
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
t_acrit <- qt(0.95,14)
t_acrit
t_bcrit <- qt(0.5,15)
t_bcrit
t_bcrit <- qt(0.01,14)
t_bcrit
t_bcrit <- qt((1-0.01),14)
t_bcrit
ceiling(1.45)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degrees of freedom)
sample_Size<-function(Sp ,d, a, b ,f)
{
n <- (qt(a,f) + qt(b,f))^2 * Sp^2 * (2/d^2)
for (m in ceiling(n):100) {
df = 2*m - 2
k <- (qt(a,df) + qt(b,df))^2 * Sp^2 * (2/d^2)
if (m >= k) {
return(m)
}
}
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
#function definition
# ( CommonStand.dev, differance_of_mean ,confidanceLevel, ß error, degrees of freedom)
sample_Size<-function(Sp ,d, a, b ,f)
{
n <- (qt(a,f) + qt(b,f))^2 * Sp^2 * (2/d^2)
for (m in ceiling(n):100) {
df = 2*m - 2
k <- (qt(a,df) + qt(b,df))^2 * Sp^2 * (2/d^2)
if (m >= k) {
return(m)
}
}
}
sample_Size(29.52, 71, 0.95, 0.5, 14)
sample_Size(29.52, 71, 0.95, 0.1, 14)
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
die1 <- sample(1:6, 36, replace=TRUE);
die2 <- sample(1:6, 36, replace=TRUE);
die3 <- sample(1:6, 36, replace=TRUE);
die4 <- sample(1:6, 36, replace=TRUE);
matrix_4.die <- data.frame(die1, die2, die3, die4);
#mean of rows
mean_4.die <- rowMeans(matrix_4.die)
r1 <- mean_4.die
#observed frequency
obs_freq <- c(length(r1[r1 >= 1  &  r1 < 2]),
length(r1[r1 >= 2  & r1 < 3]),
length(r1[r1 >= 3  & r1 < 4]),
length(r1[r1 >= 4  & r1 < 5]),
length(r1[r1 >= 5  & r1 < 6]),
length(r1[r1 >= 6  & r1 < 7]));
#normalising
p1 <- pnorm(1, mean=3.5, sd=0.85);
p2 <- pnorm(2, mean=3.5, sd=0.85);
p3 <- pnorm(3, mean=3.5, sd=0.85);
p4 <- pnorm(4, mean=3.5, sd=0.85);
p5 <- pnorm(5, mean=3.5, sd=0.85);
p6 <- pnorm(6, mean=3.5, sd=0.85);
#expected probability
exp_prob <- c(p1,p2-p1,p3-p2,p4-p3,p5-p4,p6-p5);
#expected frequency
exp_freq <- 36*exp_prob;
diff <- (obs_freq - exp_freq)^2;
chi_cal <- sum(diff)/sum(exp_freq)
chi_cal
#Calculated value = 6.463888
chi_critical <- qchisq(0.95,5)
chi_critical                      #critical_val = 11.0705
#As chi_cal < chi_critical, we accept the null Hypothesis
q()
q()
waterDataTraining <- readRDS("F:/Google Drive/Master 2016/Sommer Semester 3/Simulation Method/ResourcePackage/source/R/Framework/Data/waterDataTraining.RDS")
rm(list=ls());
set.seed(2);
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
source("f1score.R")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages('installr')
if(!require("installr")) install.packages('installr')
library("installr")
updateR() # this will open dialog boxes to take you through the steps.
# OR use:
# updateR(TRUE) # this will use common defaults and will be the safest/fastest option
library("installr")
installr() #  user can easily select (via a GUI interface) a software to install.
View(machines)
View(matrix_4.die)
View(OC)
View(data)
###############################################################################
### initialize workspace ######################################################
rm(list=ls());
set.seed(2);
setwd("F:/Google Drive/Master 2016/Sommer Semester 3/Simulation Method/ResourcePackage/source")
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
source("f1score.R")
###############################################################################
### read training data  #######################################################
#timeSeriesData <- data.frame(X1=(runif(n = 100)*100), X2=(runif(n = 100)*100), X3=(runif(n = 100)*100), EVENT=(runif(n = 100)+0.03)>=1, Prediction=NA)
setwd(dataDir)
trainingData <- readRDS(file = "waterDataTraining2018.RDS")
###############################################################################
### initialize workspace ######################################################
rm(list=ls());
set.seed(2);
setwd("F:/Google Drive/Master 2016/Sommer Semester 3/Simulation Method/ResourcePackage/source")
baseDir <- getwd()
dataDir  <- paste(baseDir, "Data", sep="/")
submissionDir <- paste(baseDir, "Detectors", sep="/")
librariesDir  <- paste(baseDir, "Lib", sep="/")
setwd(librariesDir)
q()
install.packages("xlsx")
library(xlsx)
data <- read.xlsx("C:/Users/weeam/Desktop/data.xlsx")
data <- read.xlsx("C:/Users/weeam/Desktop/data.xlsx", sheetName = "Tab")
View(data)
data <- data[data$Power >=80 & data$Power <=100,]
data <- data[data$Power >=80 & data$Power <=100 & data$Heel.Cracks >= 0.2& data$Heel.Cracks <= 0.4,]
library(xlsx)
data <- read.xlsx("C:/Users/weeam/Desktop/data.xlsx", sheetName = "Tab")
data <- data[data$Power >=80 & data$Power <=100 & data$Heel.Cracks <= 0.2,]
View(data)
MyData <- read.csv(file="results.csv", header=TRUE, sep=",")
this.dir <- dirname(parent.frame(2)$ofile)
dir <- dirname(parent.frame(2)$ofile)
dir <- getSrcDirectory()[1]
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
MyData <- read.csv(file="results.csv", header=TRUE, sep=",")
View(MyData)
http_sip_cosine <- MyData[][2]
View(http_sip_cosine)
View(http_sip_cosine)
http_sip_cosine <- MyData[][3]
View(http_sip_cosine)
plot(http_sip_cosine)
plot(http_sip_cosine, ylim=c(1,50))
plot(http_sip_cosine, ylim=c(1,50,1))
http_sip_cosine <- MyData[][3]
par(mfrow = c(2,2))
plot(http_sip_cosine, ylim=c(0,50))
View(http_sip_cosine)
http_sip_cosine <- MyData[2:][3]
http_sip_cosine <- MyData[2,][3]
View(http_sip_cosine)
http_sip_cosine <- MyData[,2:][3]
http_sip_cosine <- MyData[2,3]
http_sip_cosine
par(mfrow = c(2,2))
plot(http_sip_cosine, ylim=c(0,50))
hist(http_sip_cosine)
http_sip_cosine <- MyData[2:101,3]
http_sip_cosine <- MyData[2:101][3]
http_sip_cosine <- MyData[2][3]
http_sip_cosine <- MyData[][3]
View(http_sip_cosine)
http_sip_cosine <- MyData[2,][3]
View(http_sip_cosine)
http_sip_cosine <- MyData[2:101,][3]
View(http_sip_cosine)
par(mfrow = c(2,2))
hist(http_sip_cosine)
MyData1 <- melt(MyData[2:101,][3:47], id=MyData[1,][3:47])
m <- MyData[2:101,][3:47]
View(m)
id=MyData[1,][3:47]
View(id)
MyData1 <- melt(MyData[2:101,][3:47], id=MyData[1,][3:47])
library(reshape)
require(reshape)
install.packages(reshape)
install.packages("reshape")
require(reshape)
MyData1 <- melt(MyData[2:101,][3:47], id=MyData[1,][3:47])
MyData1 <- melt(MyData[2:101,][3:47], id=c(MyData[1,][3:47]))
cc <- MyData[1,][3:47]
View(cc)
MyData1 <- melt(MyData[2:101,][3:47], id=cc)
MyData <- read.csv(file="results.csv", header=TRUE, sep=",")
MyData1 <- MyData[2:101,][3:47]
View(MyData)
# set the working directory to be the same as file path
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
MyData <- read.csv(file="results.csv", header=TRUE, sep=",")
MyData <- MyData[2:101,][3:47]
View(MyData)
http_sip_cosine <- MyData[][3]
View(http_sip_cosine)
par(mfrow = c(2,2))
hist(http_sip_cosine)
http_sip_cosine <- as.numeric(MyData[][3])
View(http_sip_cosine)
http_sip_cosine <- as.numeric(MyData[,3])
View(MyData)
http_sip_cosine <- as.numeric(MyData[,3])
http_sip_cosine
par(mfrow = c(2,2))
hist(http_sip_cosine)
http_sip_cosine <- MyData[,3]
http_sip_cosine
par(mfrow = c(2,2))
hist(http_sip_cosine)
par(mfrow = c(2,2))
plot(http_sip_cosine)
par(mfrow = c(2,2))
plot(http_sip_cosine)
par(mfrow = c(2,2))
plot(c(1:30), http_sip_cosine)
par(mfrow = c(2,2))
plot(c(1:100), http_sip_cosine)
par(mfrow = c(2,2))
boxplot(http_sip_cosine)
par(mfrow = c(2,2))
plot(http_sip_cosine, c(0.00:1.00))
par(mfrow = c(2,2))
plot(http_sip_cosine, seq(0, 1, 0.01))
seq(0, 1, 0.01)
s<-seq(0, 1, 0.01)
s<-seq(0.01, 1, 0.01)
par(mfrow = c(2,2))
plot(http_sip_cosine, s)
hist(http_sip_cosine)
summary(http_sip_cosine)
par(mfrow = c(2,2))
plot(http_sip_cosine)
View(MyData)
plot(ftp_ftp_Needleman_wunch_1, xlabel="FTP/FTP (100% DIF)")
# set the working directory to be the same as file path
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
MyData <- read.csv(file="results.csv", header=TRUE, sep=",")
MyData <- MyData[2:101,][3:47]
http_sip_cosine <- MyData[,1]
http_ftp_cosine <- MyData[,6]
sip_ftp_cosine <- MyData[,11]
http_http_cosine_5 <- MyData[1:50,16]
sip_sip_cosine_5 <- MyData[1:50,21]
ftp_ftp_cosine_5 <- MyData[1:50,26]
http_http_cosine_1 <- MyData[1:50,31]
sip_sip_cosine_1 <- MyData[1:50,36]
ftp_ftp_cosine_1 <- MyData[1:50,41]
par(mfrow = c(3,3))
plot(http_sip_cosine, xlabel="HTTP/SIP")
plot(http_ftp_cosine, xlabel="HTTP/FTP")
plot(sip_ftp_cosine, xlabel="SIP/FTP")
plot(http_http_cosine_5, xlabel="HTTP/HTTP (50% DIF)")
plot(http_http_cosine_1, xlabel="HTTP/HTTP (100% DIF)")
plot(sip_sip_cosine_5 , xlabel="SIP/SIP (50% DIF)")
plot(http_sip_cosine, xlabel="HTTP/SIP")
http_sip_cosine <- MyData[,1]
http_ftp_cosine <- MyData[,6]
sip_ftp_cosine <- MyData[,11]
http_http_cosine_5 <- MyData[1:50,16]
sip_sip_cosine_5 <- MyData[1:50,21]
ftp_ftp_cosine_5 <- MyData[1:50,26]
http_http_cosine_1 <- MyData[1:50,31]
sip_sip_cosine_1 <- MyData[1:50,36]
ftp_ftp_cosine_1 <- MyData[1:50,41]
par(mfrow = c(3,3))
plot(http_sip_cosine, xlabel="HTTP/SIP")
